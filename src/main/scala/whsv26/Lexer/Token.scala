package whsv26.Lexer

object Token:
  case class PhpToken(t: PhpSimpleToken|PhpComplexToken, content: Option[String], line: Option[Int])

  def toPhpSimpleToken(s: String) = s match {
    case "(" => Some(PhpSimpleToken.OpenRoundBrackets)
    case ")" => Some(PhpSimpleToken.CloseRoundBrackets)
    case "{" => Some(PhpSimpleToken.OpenCurlyBrackets)
    case "}" => Some(PhpSimpleToken.CloseCurlyBrackets)
    case "[" => Some(PhpSimpleToken.OpenSquareBrackets)
    case "]" => Some(PhpSimpleToken.CloseSquareBrackets)
    case "," => Some(PhpSimpleToken.Comma)
    case "." => Some(PhpSimpleToken.Dot)
    case ":" => Some(PhpSimpleToken.Colon)
    case ";" => Some(PhpSimpleToken.Semicolon)
    case "=" => Some(PhpSimpleToken.Assign)
    case _ => None
  }

  def toPhpComplexToken(s: String) = s match {
    case "T_ABSTRACT" => Some(PhpComplexToken.Abstract)
    case "T_AND_EQUAL" => Some(PhpComplexToken.AndEqual)
    case "T_ARRAY" => Some(PhpComplexToken.Array)
    case "T_ARRAY_CAST" => Some(PhpComplexToken.ArrayCast)
    case "T_AS" => Some(PhpComplexToken.As)
    case "T_BAD_CHARACTER" => Some(PhpComplexToken.BadCharacter)
    case "T_BOOLEAN_AND" => Some(PhpComplexToken.BooleanAnd)
    case "T_BOOLEAN_OR" => Some(PhpComplexToken.BooleanOr)
    case "T_BOOL_CAST" => Some(PhpComplexToken.BoolCast)
    case "T_BREAK" => Some(PhpComplexToken.Break)
    case "T_CALLABLE" => Some(PhpComplexToken.Callable)
    case "T_CASE" => Some(PhpComplexToken.Case)
    case "T_CATCH" => Some(PhpComplexToken.Catch)
    case "T_CLASS" => Some(PhpComplexToken.Class)
    case "T_CLASS_C" => Some(PhpComplexToken.ClassC)
    case "T_CLONE" => Some(PhpComplexToken.Clone)
    case "T_CLOSE_TAG" => Some(PhpComplexToken.CloseTag)
    case "T_COALESCE" => Some(PhpComplexToken.Coalesce)
    case "T_COALESCE_EQUAL" => Some(PhpComplexToken.CoalesceEqual)
    case "T_COMMENT" => Some(PhpComplexToken.Comment)
    case "T_CONCAT_EQUAL" => Some(PhpComplexToken.ConcatEqual)
    case "T_CONST" => Some(PhpComplexToken.Const)
    case "T_CONSTANT_ENCAPSED_STRING" => Some(PhpComplexToken.ConstantEncapsedString)
    case "T_CONTINUE" => Some(PhpComplexToken.Continue)
    case "T_CURLY_OPEN" => Some(PhpComplexToken.CurlyOpen)
    case "T_DEC" => Some(PhpComplexToken.Dec)
    case "T_DECLARE" => Some(PhpComplexToken.Declare)
    case "T_DEFAULT" => Some(PhpComplexToken.Default)
    case "T_DIR" => Some(PhpComplexToken.Dir)
    case "T_DIV_EQUAL" => Some(PhpComplexToken.DivEqual)
    case "T_DNUMBER" => Some(PhpComplexToken.Dnumber)
    case "T_DO" => Some(PhpComplexToken.Do)
    case "T_DOC_COMMENT" => Some(PhpComplexToken.DocComment)
    case "T_DOLLAR_OPEN_CURLY_BRACES" => Some(PhpComplexToken.DollarOpenCurlyBraces)
    case "T_DOUBLE_ARROW" => Some(PhpComplexToken.DoubleArrow)
    case "T_DOUBLE_CAST" => Some(PhpComplexToken.DoubleCast)
    case "T_DOUBLE_COLON" => Some(PhpComplexToken.DoubleColon)
    case "T_ECHO" => Some(PhpComplexToken.Echo)
    case "T_ELLIPSIS" => Some(PhpComplexToken.Ellipsis)
    case "T_ELSE" => Some(PhpComplexToken.Else)
    case "T_ELSEIF" => Some(PhpComplexToken.Elseif)
    case "T_EMPTY" => Some(PhpComplexToken.Empty)
    case "T_ENCAPSED_AND_WHITESPACE" => Some(PhpComplexToken.EncapsedAndWhitespace)
    case "T_ENDDECLARE" => Some(PhpComplexToken.Enddeclare)
    case "T_ENDFOR" => Some(PhpComplexToken.Endfor)
    case "T_ENDFOREACH" => Some(PhpComplexToken.Endforeach)
    case "T_ENDIF" => Some(PhpComplexToken.Endif)
    case "T_ENDSWITCH" => Some(PhpComplexToken.Endswitch)
    case "T_ENDWHILE" => Some(PhpComplexToken.Endwhile)
    case "T_END_HEREDOC" => Some(PhpComplexToken.EndHeredoc)
    case "T_EVAL" => Some(PhpComplexToken.Eval)
    case "T_EXIT" => Some(PhpComplexToken.Exit)
    case "T_EXTENDS" => Some(PhpComplexToken.Extends)
    case "T_FILE" => Some(PhpComplexToken.File)
    case "T_FINAL" => Some(PhpComplexToken.Final)
    case "T_FINALLY" => Some(PhpComplexToken.Finally)
    case "T_FN" => Some(PhpComplexToken.Fn)
    case "T_FOR" => Some(PhpComplexToken.For)
    case "T_FOREACH" => Some(PhpComplexToken.Foreach)
    case "T_FUNCTION" => Some(PhpComplexToken.Function)
    case "T_FUNC_C" => Some(PhpComplexToken.FuncC)
    case "T_GLOBAL" => Some(PhpComplexToken.Global)
    case "T_GOTO" => Some(PhpComplexToken.Goto)
    case "T_HALT_COMPILER" => Some(PhpComplexToken.HaltCompiler)
    case "T_IF" => Some(PhpComplexToken.If)
    case "T_IMPLEMENTS" => Some(PhpComplexToken.Implements)
    case "T_INC" => Some(PhpComplexToken.Inc)
    case "T_INCLUDE" => Some(PhpComplexToken.Include)
    case "T_INCLUDE_ONCE" => Some(PhpComplexToken.IncludeOnce)
    case "T_INLINE_HTML" => Some(PhpComplexToken.InlineHtml)
    case "T_INSTANCEOF" => Some(PhpComplexToken.Instanceof)
    case "T_INSTEADOF" => Some(PhpComplexToken.Insteadof)
    case "T_INTERFACE" => Some(PhpComplexToken.Interface)
    case "T_INT_CAST" => Some(PhpComplexToken.IntCast)
    case "T_ISSET" => Some(PhpComplexToken.Isset)
    case "T_IS_EQUAL" => Some(PhpComplexToken.IsEqual)
    case "T_IS_GREATER_OR_EQUAL" => Some(PhpComplexToken.IsGreaterOrEqual)
    case "T_IS_IDENTICAL" => Some(PhpComplexToken.IsIdentical)
    case "T_IS_NOT_EQUAL" => Some(PhpComplexToken.IsNotEqual)
    case "T_IS_NOT_IDENTICAL" => Some(PhpComplexToken.IsNotIdentical)
    case "T_IS_SMALLER_OR_EQUAL" => Some(PhpComplexToken.IsSmallerOrEqual)
    case "T_LINE" => Some(PhpComplexToken.Line)
    case "T_LIST" => Some(PhpComplexToken.List)
    case "T_LNUMBER" => Some(PhpComplexToken.Lnumber)
    case "T_LOGICAL_AND" => Some(PhpComplexToken.LogicalAnd)
    case "T_LOGICAL_OR" => Some(PhpComplexToken.LogicalOr)
    case "T_LOGICAL_XOR" => Some(PhpComplexToken.LogicalXor)
    case "T_METHOD_C" => Some(PhpComplexToken.MethodC)
    case "T_MINUS_EQUAL" => Some(PhpComplexToken.MinusEqual)
    case "T_MOD_EQUAL" => Some(PhpComplexToken.ModEqual)
    case "T_MUL_EQUAL" => Some(PhpComplexToken.MulEqual)
    case "T_NAMESPACE" => Some(PhpComplexToken.Namespace)
    case "T_NEW" => Some(PhpComplexToken.New)
    case "T_NS_C" => Some(PhpComplexToken.NsC)
    case "T_NS_SEPARATOR" => Some(PhpComplexToken.NsSeparator)
    case "T_NUM_STRING" => Some(PhpComplexToken.NumString)
    case "T_OBJECT_CAST" => Some(PhpComplexToken.ObjectCast)
    case "T_OBJECT_OPERATOR" => Some(PhpComplexToken.ObjectOperator)
    case "T_NULLSAFE_OBJECT_OPERATOR" => Some(PhpComplexToken.NullsafeObjectOperator)
    case "T_OPEN_TAG" => Some(PhpComplexToken.OpenTag)
    case "T_OPEN_TAG_WITH_ECHO" => Some(PhpComplexToken.OpenTagWithEcho)
    case "T_OR_EQUAL" => Some(PhpComplexToken.OrEqual)
    case "T_PAAMAYIM_NEKUDOTAYIM" => Some(PhpComplexToken.PaamayimNekudotayim)
    case "T_PLUS_EQUAL" => Some(PhpComplexToken.PlusEqual)
    case "T_POW" => Some(PhpComplexToken.Pow)
    case "T_POW_EQUAL" => Some(PhpComplexToken.PowEqual)
    case "T_PRINT" => Some(PhpComplexToken.Print)
    case "T_PRIVATE" => Some(PhpComplexToken.Private)
    case "T_PROTECTED" => Some(PhpComplexToken.Protected)
    case "T_PUBLIC" => Some(PhpComplexToken.Public)
    case "T_REQUIRE" => Some(PhpComplexToken.Require)
    case "T_REQUIRE_ONCE" => Some(PhpComplexToken.RequireOnce)
    case "T_RETURN" => Some(PhpComplexToken.Return)
    case "T_SL" => Some(PhpComplexToken.Sl)
    case "T_SL_EQUAL" => Some(PhpComplexToken.SlEqual)
    case "T_SPACESHIP" => Some(PhpComplexToken.Spaceship)
    case "T_SR" => Some(PhpComplexToken.Sr)
    case "T_SR_EQUAL" => Some(PhpComplexToken.SrEqual)
    case "T_START_HEREDOC" => Some(PhpComplexToken.StartHeredoc)
    case "T_STATIC" => Some(PhpComplexToken.Static)
    case "T_STRING" => Some(PhpComplexToken.String)
    case "T_STRING_CAST" => Some(PhpComplexToken.StringCast)
    case "T_STRING_VARNAME" => Some(PhpComplexToken.StringVarname)
    case "T_SWITCH" => Some(PhpComplexToken.Switch)
    case "T_THROW" => Some(PhpComplexToken.Throw)
    case "T_TRAIT" => Some(PhpComplexToken.Trait)
    case "T_TRAIT_C" => Some(PhpComplexToken.TraitC)
    case "T_TRY" => Some(PhpComplexToken.Try)
    case "T_UNSET" => Some(PhpComplexToken.Unset)
    case "T_UNSET_CAST" => Some(PhpComplexToken.UnsetCast)
    case "T_USE" => Some(PhpComplexToken.Use)
    case "T_VAR" => Some(PhpComplexToken.Var)
    case "T_VARIABLE" => Some(PhpComplexToken.Variable)
    case "T_WHILE" => Some(PhpComplexToken.While)
    case "T_WHITESPACE" => Some(PhpComplexToken.Whitespace)
    case "T_XOR_EQUAL" => Some(PhpComplexToken.XorEqual)
    case "T_YIELD" => Some(PhpComplexToken.Yield)
    case "T_YIELD_FROM" => Some(PhpComplexToken.YieldFrom)
    case _ => None
  }

  enum PhpSimpleToken(val t: String):
    case OpenRoundBrackets extends PhpSimpleToken("(")
    case CloseRoundBrackets extends PhpSimpleToken(")")
    case OpenCurlyBrackets extends PhpSimpleToken("{")
    case CloseCurlyBrackets extends PhpSimpleToken("}")
    case OpenSquareBrackets extends PhpSimpleToken("[")
    case CloseSquareBrackets extends PhpSimpleToken("]")
    case Comma extends PhpSimpleToken(",")
    case Dot extends PhpSimpleToken(".")
    case Colon extends PhpSimpleToken(":")
    case Semicolon extends PhpSimpleToken(";")
    case Assign extends PhpSimpleToken("=")

  enum PhpComplexToken(val t: String):
    case Abstract extends PhpComplexToken("T_ABSTRACT")
    case AndEqual extends PhpComplexToken("T_AND_EQUAL")
    case Array extends PhpComplexToken("T_ARRAY")
    case ArrayCast extends PhpComplexToken("T_ARRAY_CAST")
    case As extends PhpComplexToken("T_AS")
    case BadCharacter extends PhpComplexToken("T_BAD_CHARACTER")
    case BooleanAnd extends PhpComplexToken("T_BOOLEAN_AND")
    case BooleanOr extends PhpComplexToken("T_BOOLEAN_OR")
    case BoolCast extends PhpComplexToken("T_BOOL_CAST")
    case Break extends PhpComplexToken("T_BREAK")
    case Callable extends PhpComplexToken("T_CALLABLE")
    case Case extends PhpComplexToken("T_CASE")
    case Catch extends PhpComplexToken("T_CATCH")
    case Class extends PhpComplexToken("T_CLASS")
    case ClassC extends PhpComplexToken("T_CLASS_C")
    case Clone extends PhpComplexToken("T_CLONE")
    case CloseTag extends PhpComplexToken("T_CLOSE_TAG")
    case Coalesce extends PhpComplexToken("T_COALESCE")
    case CoalesceEqual extends PhpComplexToken("T_COALESCE_EQUAL")
    case Comment extends PhpComplexToken("T_COMMENT")
    case ConcatEqual extends PhpComplexToken("T_CONCAT_EQUAL")
    case Const extends PhpComplexToken("T_CONST")
    case ConstantEncapsedString extends PhpComplexToken("T_CONSTANT_ENCAPSED_STRING")
    case Continue extends PhpComplexToken("T_CONTINUE")
    case CurlyOpen extends PhpComplexToken("T_CURLY_OPEN")
    case Dec extends PhpComplexToken("T_DEC")
    case Declare extends PhpComplexToken("T_DECLARE")
    case Default extends PhpComplexToken("T_DEFAULT")
    case Dir extends PhpComplexToken("T_DIR")
    case DivEqual extends PhpComplexToken("T_DIV_EQUAL")
    case Dnumber extends PhpComplexToken("T_DNUMBER")
    case Do extends PhpComplexToken("T_DO")
    case DocComment extends PhpComplexToken("T_DOC_COMMENT")
    case DollarOpenCurlyBraces extends PhpComplexToken("T_DOLLAR_OPEN_CURLY_BRACES")
    case DoubleArrow extends PhpComplexToken("T_DOUBLE_ARROW")
    case DoubleCast extends PhpComplexToken("T_DOUBLE_CAST")
    case DoubleColon extends PhpComplexToken("T_DOUBLE_COLON")
    case Echo extends PhpComplexToken("T_ECHO")
    case Ellipsis extends PhpComplexToken("T_ELLIPSIS")
    case Else extends PhpComplexToken("T_ELSE")
    case Elseif extends PhpComplexToken("T_ELSEIF")
    case Empty extends PhpComplexToken("T_EMPTY")
    case EncapsedAndWhitespace extends PhpComplexToken("T_ENCAPSED_AND_WHITESPACE")
    case Enddeclare extends PhpComplexToken("T_ENDDECLARE")
    case Endfor extends PhpComplexToken("T_ENDFOR")
    case Endforeach extends PhpComplexToken("T_ENDFOREACH")
    case Endif extends PhpComplexToken("T_ENDIF")
    case Endswitch extends PhpComplexToken("T_ENDSWITCH")
    case Endwhile extends PhpComplexToken("T_ENDWHILE")
    case EndHeredoc extends PhpComplexToken("T_END_HEREDOC")
    case Eval extends PhpComplexToken("T_EVAL")
    case Exit extends PhpComplexToken("T_EXIT")
    case Extends extends PhpComplexToken("T_EXTENDS")
    case File extends PhpComplexToken("T_FILE")
    case Final extends PhpComplexToken("T_FINAL")
    case Finally extends PhpComplexToken("T_FINALLY")
    case Fn extends PhpComplexToken("T_FN")
    case For extends PhpComplexToken("T_FOR")
    case Foreach extends PhpComplexToken("T_FOREACH")
    case Function extends PhpComplexToken("T_FUNCTION")
    case FuncC extends PhpComplexToken("T_FUNC_C")
    case Global extends PhpComplexToken("T_GLOBAL")
    case Goto extends PhpComplexToken("T_GOTO")
    case HaltCompiler extends PhpComplexToken("T_HALT_COMPILER")
    case If extends PhpComplexToken("T_IF")
    case Implements extends PhpComplexToken("T_IMPLEMENTS")
    case Inc extends PhpComplexToken("T_INC")
    case Include extends PhpComplexToken("T_INCLUDE")
    case IncludeOnce extends PhpComplexToken("T_INCLUDE_ONCE")
    case InlineHtml extends PhpComplexToken("T_INLINE_HTML")
    case Instanceof extends PhpComplexToken("T_INSTANCEOF")
    case Insteadof extends PhpComplexToken("T_INSTEADOF")
    case Interface extends PhpComplexToken("T_INTERFACE")
    case IntCast extends PhpComplexToken("T_INT_CAST")
    case Isset extends PhpComplexToken("T_ISSET")
    case IsEqual extends PhpComplexToken("T_IS_EQUAL")
    case IsGreaterOrEqual extends PhpComplexToken("T_IS_GREATER_OR_EQUAL")
    case IsIdentical extends PhpComplexToken("T_IS_IDENTICAL")
    case IsNotEqual extends PhpComplexToken("T_IS_NOT_EQUAL")
    case IsNotIdentical extends PhpComplexToken("T_IS_NOT_IDENTICAL")
    case IsSmallerOrEqual extends PhpComplexToken("T_IS_SMALLER_OR_EQUAL")
    case Line extends PhpComplexToken("T_LINE")
    case List extends PhpComplexToken("T_LIST")
    case Lnumber extends PhpComplexToken("T_LNUMBER")
    case LogicalAnd extends PhpComplexToken("T_LOGICAL_AND")
    case LogicalOr extends PhpComplexToken("T_LOGICAL_OR")
    case LogicalXor extends PhpComplexToken("T_LOGICAL_XOR")
    case MethodC extends PhpComplexToken("T_METHOD_C")
    case MinusEqual extends PhpComplexToken("T_MINUS_EQUAL")
    case ModEqual extends PhpComplexToken("T_MOD_EQUAL")
    case MulEqual extends PhpComplexToken("T_MUL_EQUAL")
    case Namespace extends PhpComplexToken("T_NAMESPACE")
    case New extends PhpComplexToken("T_NEW")
    case NsC extends PhpComplexToken("T_NS_C")
    case NsSeparator extends PhpComplexToken("T_NS_SEPARATOR")
    case NumString extends PhpComplexToken("T_NUM_STRING")
    case ObjectCast extends PhpComplexToken("T_OBJECT_CAST")
    case ObjectOperator extends PhpComplexToken("T_OBJECT_OPERATOR")
    case NullsafeObjectOperator extends PhpComplexToken("T_NULLSAFE_OBJECT_OPERATOR")
    case OpenTag extends PhpComplexToken("T_OPEN_TAG")
    case OpenTagWithEcho extends PhpComplexToken("T_OPEN_TAG_WITH_ECHO")
    case OrEqual extends PhpComplexToken("T_OR_EQUAL")
    case PaamayimNekudotayim extends PhpComplexToken("T_PAAMAYIM_NEKUDOTAYIM")
    case PlusEqual extends PhpComplexToken("T_PLUS_EQUAL")
    case Pow extends PhpComplexToken("T_POW")
    case PowEqual extends PhpComplexToken("T_POW_EQUAL")
    case Print extends PhpComplexToken("T_PRINT")
    case Private extends PhpComplexToken("T_PRIVATE")
    case Protected extends PhpComplexToken("T_PROTECTED")
    case Public extends PhpComplexToken("T_PUBLIC")
    case Require extends PhpComplexToken("T_REQUIRE")
    case RequireOnce extends PhpComplexToken("T_REQUIRE_ONCE")
    case Return extends PhpComplexToken("T_RETURN")
    case Sl extends PhpComplexToken("T_SL")
    case SlEqual extends PhpComplexToken("T_SL_EQUAL")
    case Spaceship extends PhpComplexToken("T_SPACESHIP")
    case Sr extends PhpComplexToken("T_SR")
    case SrEqual extends PhpComplexToken("T_SR_EQUAL")
    case StartHeredoc extends PhpComplexToken("T_START_HEREDOC")
    case Static extends PhpComplexToken("T_STATIC")
    case String extends PhpComplexToken("T_STRING")
    case StringCast extends PhpComplexToken("T_STRING_CAST")
    case StringVarname extends PhpComplexToken("T_STRING_VARNAME")
    case Switch extends PhpComplexToken("T_SWITCH")
    case Throw extends PhpComplexToken("T_THROW")
    case Trait extends PhpComplexToken("T_TRAIT")
    case TraitC extends PhpComplexToken("T_TRAIT_C")
    case Try extends PhpComplexToken("T_TRY")
    case Unset extends PhpComplexToken("T_UNSET")
    case UnsetCast extends PhpComplexToken("T_UNSET_CAST")
    case Use extends PhpComplexToken("T_USE")
    case Var extends PhpComplexToken("T_VAR")
    case Variable extends PhpComplexToken("T_VARIABLE")
    case While extends PhpComplexToken("T_WHILE")
    case Whitespace extends PhpComplexToken("T_WHITESPACE")
    case XorEqual extends PhpComplexToken("T_XOR_EQUAL")
    case Yield extends PhpComplexToken("T_YIELD")
    case YieldFrom extends PhpComplexToken("T_YIELD_FROM")
